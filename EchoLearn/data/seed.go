package data

import (
	"encoding/json"
	"errors"
	"io/ioutil"
	"log"
	"os"

	"github.com/EchoLearnAI/EchoLearn/models"
	"gorm.io/gorm"
)

// SeedData contains all the data to be seeded.
// For now, it only contains questions.
type SeedData struct {
	Questions []models.Question `json:"questions"`
}

// LoadQuestionsFromJSON loads questions from the embedded JSON file.
func LoadQuestionsFromJSON(filePath string) ([]models.Question, error) {
	jsonFile, err := os.Open(filePath)
	if err != nil {
		log.Printf("Error opening JSON file at %s: %v", filePath, err)
		return nil, err
	}
	defer jsonFile.Close()

	byteValue, _ := ioutil.ReadAll(jsonFile)

	var questions []models.Question
	if err = json.Unmarshal(byteValue, &questions); err != nil {
		log.Printf("Error unmarshalling JSON from %s: %v", filePath, err)
		return nil, err
	}
	return questions, nil
}

// Seed runs the database seeding process.
func Seed(db *gorm.DB) {
	questions, err := LoadQuestionsFromJSON("data/questions.json")
	if err != nil {
		log.Fatalf("Failed to load questions for seeding: %v", err)
		return
	}

	if len(questions) == 0 {
	    log.Println("No questions found in questions.json to seed.")
	    return
	}

	log.Printf("Found %d questions to potentially seed.", len(questions))

	for _, q := range questions {
		// Check if grammar rule exists by title, or create it
		var grammarRule models.GrammarRule
		err := db.Where("title = ?", q.GrammarRule.Title).First(&grammarRule).Error
		
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			log.Printf("Error checking grammar rule %s: %v. Skipping question: %s", q.GrammarRule.Title, err, q.Text)
			continue
		}

		if errors.Is(err, gorm.ErrRecordNotFound) {
		    log.Printf("Creating new grammar rule: %s", q.GrammarRule.Title)
			newRule := models.GrammarRule{
				Title:       q.GrammarRule.Title,
				Description: q.GrammarRule.Description,
				Examples:    q.GrammarRule.Examples,
			}
			if err := db.Create(&newRule).Error; err != nil {
				log.Printf("Could not create grammar rule %s: %v. Skipping question: %s", newRule.Title, err, q.Text)
				continue
			}
			q.GrammarRuleID = newRule.ID
            q.GrammarRule = newRule // Associate the created rule
		} else {
            log.Printf("Found existing grammar rule: %s (ID: %s)", grammarRule.Title, grammarRule.ID)
			q.GrammarRuleID = grammarRule.ID
            q.GrammarRule = grammarRule // Associate the existing rule
		}

        // Ensure the question object itself is clean before creation, especially if it was partially filled from JSON
        // The GrammarRule field in Question struct should be the full object, not just an ID from JSON.
        // If q.GrammarRule was populated directly from JSON and only had ID, we need to load it.
        // However, our JSON structure for questions.json nests the full GrammarRule object, so this should be fine.
        // The key is that q.GrammarRuleID is set correctly before creating the question.

		// Create the question along with its options (GORM handles associations)
        // Note: Options in JSON should not have IDs; they will be generated by BeforeCreate hook.
        // QuestionID for options will be set by GORM.

        // Remove any pre-assigned IDs from options in the seed data, GORM/hooks will handle it
        for i := range q.Options {
            q.Options[i].ID = "" 
        }

		if err := db.Create(&q).Error; err != nil {
			log.Printf("Error seeding question \"%s\": %v", q.Text, err)
		} else {
			log.Printf("Successfully seeded question: %s", q.Text)
		}
	}

	log.Println("Seeding process completed.")

	// Example: Create a dummy user if no users exist
	var userCount int64
	db.Model(&models.User{}).Count(&userCount)
	if userCount == 0 {
		dummyUser := models.User{Name: "Test User", Email: "test@example.com"}
		db.Create(&dummyUser)
		log.Println("Created a dummy test user.")
	}
} 