package main

import (
	"log"
	"os"

	"github.com/EchoLearnAI/EchoLearn/api"
	"github.com/EchoLearnAI/EchoLearn/config"
	"github.com/EchoLearnAI/EchoLearn/data"
	"github.com/EchoLearnAI/EchoLearn/db"

	"github.com/gin-contrib/cors"
	// Gin is implicitly used by api.SetupRouter, but good to have if direct router manipulation is needed
	// swaggerFiles and ginSwagger are already imported via api/routes.go if swagger is there
	_ "github.com/EchoLearnAI/EchoLearn/docs" // docs is generated by Swag CLI
)

// @title EchoLearn API
// @version 1.0
// @description This is the API for the EchoLearn English learning application.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /api/v1
// @schemes http https

func main() {
	// Load configuration
	config.LoadConfig()     // This will load from .env or defaults and populate config.AppConfig
	cfg := config.AppConfig // Use the populated AppConfig

	// Initialize database connection
	// db.Connect() initializes, migrates, and stores the db instance internally.
	_, err := db.Connect()
	if err != nil {
		log.Fatalf("Database connection failed from main: %v", err)
	}

	// Seed database
	db.SeedDatabase(data.Seed)

	// Prepare CORS middleware
	corsConfig := cors.DefaultConfig()
	corsConfig.AllowOrigins = []string{"http://localhost:3000"}
	corsConfig.AllowMethods = []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"}
	corsConfig.AllowHeaders = []string{"Origin", "Content-Length", "Content-Type", "Authorization", "X-Requested-With"}
	corsConfig.AllowCredentials = true
	corsMiddleware := cors.New(corsConfig)

	// Set up Gin router, passing the CORS middleware to be applied first
	router := api.SetupRouter(corsMiddleware) // This returns the *gin.Engine with routes and Swagger setup

	// Start server
	port := cfg.ServerPort
	if port == "" {
		port = os.Getenv("PORT")
		if port == "" {
			port = "8080"
		}
	}
	log.Printf("Server starting on port %s", port)
	if err := router.Run(":" + port); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
