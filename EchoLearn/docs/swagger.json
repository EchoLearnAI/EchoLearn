{
    "swagger": "2.0",
    "info": {
        "description": "API for EchoLearn English learning app.",
        "title": "EchoLearn API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/questions": {
            "post": {
                "description": "Adds a new question to the database. Requires admin privileges (not implemented in MVP).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Add a new question (admin)",
                "parameters": [
                    {
                        "description": "Question object",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Question"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Question"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/questions/category/{name}": {
            "get": {
                "description": "Retrieves 10 questions for a given category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Get questions by category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Question"
                            }
                        }
                    },
                    "404": {
                        "description": "No questions found for this category",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/questions/random": {
            "get": {
                "description": "Retrieves a single random question from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Get a random question",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Question"
                        }
                    },
                    "404": {
                        "description": "No questions available",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/questions/{id}": {
            "get": {
                "description": "Retrieves a specific question by its ID, including all options and grammar rule details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Get a question by ID with detailed feedback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Question"
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/session/start": {
            "post": {
                "description": "Initializes a new session for a user based on the selected game mode.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Start a new game session",
                "parameters": [
                    {
                        "description": "Session Start Info",
                        "name": "session_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.StartSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.GameSession"
                        }
                    },
                    "400": {
                        "description": "Invalid input or game mode",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/session/submit": {
            "post": {
                "description": "Records the user's answer, updates score/mistakes, and determines if the session ends.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Submit an answer for the current question in a session",
                "parameters": [
                    {
                        "description": "Answer Submission Info",
                        "name": "answer_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SubmitAnswerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "result: correct/incorrect, session_active: bool, session_details: models.GameSession",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Session or Question not found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/session/{id}/summary": {
            "get": {
                "description": "Retrieves the summary of a completed or ongoing game session, including score and answer breakdown.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get a game session summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "session: models.GameSession, answered_questions: []models.AnsweredQuestionDetail",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Add a new user to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve user details by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.StartSessionRequest": {
            "type": "object",
            "required": [
                "mode",
                "user_id"
            ],
            "properties": {
                "mode": {
                    "$ref": "#/definitions/models.GameMode"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "handlers.SubmitAnswerRequest": {
            "type": "object",
            "required": [
                "question_id",
                "selected_option_id",
                "session_id"
            ],
            "properties": {
                "question_id": {
                    "type": "string"
                },
                "selected_option_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "models.GameMode": {
            "type": "string",
            "enum": [
                "survival",
                "five_topic",
                "infinite"
            ],
            "x-enum-varnames": [
                "SurvivalMode",
                "FiveTopicMode",
                "InfiniteMode"
            ]
        },
        "models.GameSession": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "current_question_index": {
                    "description": "Index for modes like 5-topic",
                    "type": "integer"
                },
                "ended_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "max_mistakes": {
                    "description": "For Survival Mode",
                    "type": "integer"
                },
                "mistakes_made": {
                    "type": "integer"
                },
                "mode": {
                    "description": "e.g., \"survival\", \"five_topic\", \"infinite\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GameMode"
                        }
                    ]
                },
                "score": {
                    "type": "integer"
                },
                "started_at": {
                    "type": "string"
                },
                "total_questions": {
                    "description": "For modes like 5-topic",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.GrammarRule": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "examples": {
                    "description": "Could be JSON array of strings or markdown",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Option": {
            "type": "object",
            "properties": {
                "explanation": {
                    "description": "Explanation for why this option is correct/incorrect",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "label": {
                    "description": "e.g., \"A\", \"B\", \"C\", \"D\" or the text itself",
                    "type": "string"
                },
                "question_id": {
                    "description": "Foreign key to Question",
                    "type": "string"
                },
                "text": {
                    "description": "The actual option text",
                    "type": "string"
                }
            }
        },
        "models.Question": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "e.g., \"Articles\", \"Prepositions\"",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "difficulty": {
                    "description": "e.g., \"Easy\", \"Medium\", \"Hard\"",
                    "type": "string"
                },
                "grammar_rule": {
                    "$ref": "#/definitions/models.GrammarRule"
                },
                "grammar_rule_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Option"
                    }
                },
                "text": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "description": "Optional",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "progress": {
                    "description": "Simple JSON string for progress",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "utils.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}